#!/bin/bash
### BEGIN INIT INFO
# Provides:          druid_broker
# Required-Start:    $remote_fs $syslog
# Required-Stop:     $remote_fs $syslog
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Boot service for Druid broker node.
### END INIT INFO

#################################################################################
# Properties of the broker
#################################################################################
BROKER_NODE_MEMORY=256
BROKER_NODE_TIMEZONE=UTC
BROKER_NODE_ENCODING=UTF-8
BROKER_NODE_TYPE=broker
#################################################################################
# Properties of the coordinator
#################################################################################
COORDINATOR_NODE_MEMORY=256
COORDINATOR_NODE_TIMEZONE=UTC
COORDINATOR_NODE_ENCODING=UTF-8
COORDINATOR_NODE_TYPE=coordinator
#################################################################################
# Properties of the historical
#################################################################################
HISTORICAL_NODE_MEMORY=256
HISTORICAL_NODE_TIMEZONE=UTC
HISTORICAL_NODE_ENCODING=UTF-8
HISTORICAL_NODE_TYPE=historical
#################################################################################
# Properties of the Overlord
#################################################################################
OVERLORD_NODE_MEMORY=256
OVERLORD_NODE_TIMEZONE=UTC
OVERLORD_NODE_ENCODING=UTF-8
OVERLORD_NODE_TYPE=overlord
#################################################################################
# Properties of the realtime
#################################################################################
REALTIME_NODE_MEMORY=256
REALTIME_NODE_TIMEZONE=UTC
REALTIME_NODE_ENCODING=UTF-8
REALTIME_NODE_TYPE=realtime
REALTIME_NODE_SPECFILE_LOCATION=examples/wikipedia/wikipedia_realtime.spec

#################################################################################
# Fill/change the following vars
#################################################################################
PATH=/sbin:/usr/sbin:/bin:/usr/bin
NAME="druid"
WORK_DIR="/opt/druid"               # Working directory where the service will be started, defaults to /var/lib/${NAME}
USER=druid                                # User that will spawn the process, defaults to the service name
GROUP=druid                               # Group that will spawn the process, defaults to the service name
SCRIPTNAME=/etc/init.d/$NAME              # Location of this init script
LOG_PATH=${WORK_DIR}/log                   # Standard output and Standard error will be outputted here

DESC="Boot service for Druid broker node."              # String describing the service
DAEMON="/usr/bin/java"			      # Path to the service executable, e.g. /usr/bin/java

COORDINATOR_DAEMON_ARGS="-Xmx${COORDINATOR_NODE_MEMORY}m -Duser.timezone=${COORDINATOR_NODE_TIMEZONE} -Dfile.encoding=${COORDINATOR_NODE_ENCODING} -classpath config/_common:config/${COORDINATOR_NODE_TYPE}:lib/* io.druid.cli.Main server ${COORDINATOR_NODE_TYPE}"
BROKER_DAEMON_ARGS="-Xmx${BROKER_NODE_MEMORY}m -Duser.timezone=${BROKER_NODE_TIMEZONE} -Dfile.encoding=${BROKER_NODE_ENCODING} -classpath config/_common:config/${BROKER_NODE_TYPE}:lib/* io.druid.cli.Main server ${BROKER_NODE_TYPE}"
OVERLORD_DAEMON_ARGS="-Xmx${OVERLORD_NODE_MEMORY}m -Duser.timezone=${OVERLORD_NODE_TIMEZONE} -Dfile.encoding=${OVERLORD_NODE_ENCODING} -classpath config/_common:config/${OVERLORD_NODE_TYPE}:lib/* io.druid.cli.Main server ${OVERLORD_NODE_TYPE}"
HISTORICAL_DAEMON_ARGS="-Xmx${HISTORICAL_NODE_MEMORY}m -Duser.timezone=${HISTORICAL_NODE_TIMEZONE} -Dfile.encoding=${HISTORICAL_NODE_ENCODING} -classpath config/_common:config/${HISTORICAL_NODE_TYPE}:lib/* io.druid.cli.Main server ${HISTORICAL_NODE_TYPE}"
REALTIME_DAEMON_ARGS="-Xmx${REALTIME_NODE_MEMORY}m -Duser.timezone=${REALTIME_NODE_TIMEZONE} -Ddruid.realtime.specFile=${REALTIME_NODE_SPECFILE_LOCATION} -Dfile.encoding=${REALTIME_NODE_ENCODING} -classpath config/_common:config/${REALTIME_NODE_TYPE}:lib/* io.druid.cli.Main server ${REALTIME_NODE_TYPE}"

# Pid file location
COORDINATOR_PIDFILE=${WORK_DIR}/${NAME}_${COORDINATOR_NODE_TYPE}.pid
BROKER_PIDFILE=${WORK_DIR}/${NAME}_${BROKER_NODE_TYPE}.pid
OVERLORD_PIDFILE=${WORK_DIR}/${NAME}_${OVERLORD_NODE_TYPE}.pid
HISTORICAL_PIDFILE=${WORK_DIR}/${NAME}_${HISTORICAL_NODE_TYPE}.pid
REALTIME_PIDFILE=${WORK_DIR}/${NAME}_${REALTIME_NODE_TYPE}.pid

START_STOP_DAEMON_OPTIONS="--make-pidfile --chuid=$USER:$GROUP --background --chdir=$WORK_DIR"

#################################################################################
# Change the code below if needed
#################################################################################

# Exit if the package is not installed
[ -x "$DAEMON" ] || exit 0

# Read configuration variable file if it is present
[ -r /etc/default/$NAME ] && . /etc/default/$NAME

# Load the VERBOSE setting and other rcS variables
. /lib/init/vars.sh

# Define LSB log_* functions.
# Depend on lsb-base (>= 3.2-14) to ensure that this file is present
# and status_of_proc is working.
. /lib/lsb/init-functions

#
# Function that starts the daemon/service
#
do_start()
{
  # Return
  #   0 if daemon has been started
  #   1 if daemon was already running
  #   2 if daemon could not be started

  start-stop-daemon $START_STOP_DAEMON_OPTIONS --start --pidfile $COORDINATOR_PIDFILE --exec $DAEMON --test >> ${LOG_PATH}/${NAME}_${COORDINATOR_NODE_TYPE}.out 2>> ${LOG_PATH}/${NAME}_${COORDINATOR_NODE_TYPE}.err || return 1
  start-stop-daemon $START_STOP_DAEMON_OPTIONS --start --pidfile $COORDINATOR_PIDFILE --exec $DAEMON -- $COORDINATOR_DAEMON_ARGS >> ${LOG_PATH}/${NAME}_${COORDINATOR_NODE_TYPE}.out 2>> ${LOG_PATH}/${NAME}_${COORDINATOR_NODE_TYPE}.err || return 3
  sleep 10

    start-stop-daemon $START_STOP_DAEMON_OPTIONS --start --pidfile $BROKER_PIDFILE --exec $DAEMON --test >> ${LOG_PATH}/${NAME}_${BROKER_NODE_TYPE}.out 2>> ${LOG_PATH}/${NAME}_${BROKER_NODE_TYPE}.err || return 1
  start-stop-daemon $START_STOP_DAEMON_OPTIONS --start --pidfile $BROKER_PIDFILE --exec $DAEMON -- $BROKER_DAEMON_ARGS >> ${LOG_PATH}/${NAME}_${BROKER_NODE_TYPE}.out 2>> ${LOG_PATH}/${NAME}_${BROKER_NODE_TYPE}.err || return 4
  sleep 10

  start-stop-daemon $START_STOP_DAEMON_OPTIONS --start --pidfile $OVERLORD_PIDFILE --exec $DAEMON --test >> ${LOG_PATH}/${NAME}_${OVERLORD_NODE_TYPE}.out 2>> ${LOG_PATH}/${NAME}_${OVERLORD_NODE_TYPE}.err || return 1
  start-stop-daemon $START_STOP_DAEMON_OPTIONS --start --pidfile $OVERLORD_PIDFILE --exec $DAEMON -- $OVERLORD_DAEMON_ARGS >> ${LOG_PATH}/${NAME}_${OVERLORD_NODE_TYPE}.out 2>> ${LOG_PATH}/${NAME}_${OVERLORD_NODE_TYPE}.err || return 5
  sleep 10

  start-stop-daemon $START_STOP_DAEMON_OPTIONS --start --pidfile $HISTORICAL_PIDFILE --exec $DAEMON --test >> ${LOG_PATH}/${NAME}_${HISTORICAL_NODE_TYPE}.out 2>> ${LOG_PATH}/${NAME}_${HISTORICAL_NODE_TYPE}.err || return 1
  start-stop-daemon $START_STOP_DAEMON_OPTIONS --start --pidfile $HISTORICAL_PIDFILE --exec $DAEMON -- $HISTORICAL_DAEMON_ARGS >> ${LOG_PATH}/${NAME}_${HISTORICAL_NODE_TYPE}.out 2>> ${LOG_PATH}/${NAME}_${HISTORICAL_NODE_TYPE}.err || return 6
  sleep 10

  start-stop-daemon $START_STOP_DAEMON_OPTIONS --start --pidfile $REALTIME_PIDFILE --exec $DAEMON --test >> ${LOG_PATH}/${NAME}_${REALTIME_NODE_TYPE}.out 2>> ${LOG_PATH}/${NAME}_${REALTIME_NODE_TYPE}.err || return 1
  start-stop-daemon $START_STOP_DAEMON_OPTIONS --start --pidfile $REALTIME_PIDFILE --exec $DAEMON -- $REALTIME_DAEMON_ARGS >> ${LOG_PATH}/${NAME}_${REALTIME_NODE_TYPE}.out 2>> ${LOG_PATH}/${NAME}_${REALTIME_NODE_TYPE}.err || return 7

  # Add code here, if necessary, that waits for the process to be ready
  # to handle requests from services started subsequently which depend
  # on this one.  As a last resort, sleep for some time.
}

#
# Function that stops the daemon/service
#
do_stop()
{
  # Return
  #   0 if daemon has been stopped
  #   1 if daemon was already stopped
  #   2 if daemon could not be stopped
  #   other if a failure occurred
  # Wait for children to finish too if this is a daemon that forks and if the daemon is only ever run from this initscript. If the above conditions are not satisfied then add some other code
  # that waits for the process to drop all resources that could be needed by services started subsequently.  A last resort is to sleep for some time.

  start-stop-daemon --stop --quiet --retry=TERM/30/KILL/5 --pidfile $COORDINATOR_PIDFILE
  RETVAL="$?"
  [ "$RETVAL" = 2 ] && return 2
  
  start-stop-daemon --stop --quiet --retry=TERM/30/KILL/5 --pidfile $BROKER_PIDFILE
  RETVAL="$?"
  [ "$RETVAL" = 2 ] && return 2
  
  start-stop-daemon --stop --quiet --retry=TERM/30/KILL/5 --pidfile $OVERLORD_PIDFILE
  RETVAL="$?"
  [ "$RETVAL" = 2 ] && return 2
  
  start-stop-daemon --stop --quiet --retry=TERM/30/KILL/5 --pidfile $HISTORICAL_PIDFILE
  RETVAL="$?"
  [ "$RETVAL" = 2 ] && return 2
  
  start-stop-daemon --stop --quiet --retry=TERM/30/KILL/5 --pidfile $REALTIME_PIDFILE
  RETVAL="$?"
  [ "$RETVAL" = 2 ] && return 2
  
  start-stop-daemon --stop --quiet --oknodo --retry=0/30/KILL/5 --exec $DAEMON
  [ "$?" = 2 ] && return 2
  
  rm -f $COORDINATOR_PIDFILE
  rm -f $BROKER_PIDFILE
  rm -f $OVERLORD_PIDFILE
  rm -f $HISTORICAL_PIDFILE
  rm -f $REALTIME_PIDFILE


  return "$RETVAL"
}

#
# Function that sends a SIGHUP to the daemon/service
#
do_reload() {
  #
  # If the daemon can reload its configuration without
  # restarting (for example, when it is sent a SIGHUP),
  # then implement that here.
  #
  start-stop-daemon --stop --signal 1 --quiet --pidfile $COORDINATOR_PIDFILE --name $NAME
  start-stop-daemon --stop --signal 1 --quiet --pidfile $BROKER_PIDFILE --name $NAME
  start-stop-daemon --stop --signal 1 --quiet --pidfile $OVERLORD_PIDFILE --name $NAME
  start-stop-daemon --stop --signal 1 --quiet --pidfile $HISTORICAL_PIDFILE --name $NAME
  start-stop-daemon --stop --signal 1 --quiet --pidfile $REALTIME_PIDFILE --name $NAME
  return 0
}

case "$1" in
  start) 
    [ "$VERBOSE" != no ] && log_daemon_msg "Starting $DESC" "$NAME"
    do_start
    case "$?" in
      0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
      2)   [ "$VERBOSE" != no ] && log_end_msg 1 ;;
    esac
  ;;
  stop)
    [ "$VERBOSE" != no ] && log_daemon_msg "Stopping $DESC" "$NAME"
    do_stop
    case "$?" in
      0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
      2)   [ "$VERBOSE" != no ] && log_end_msg 1 ;;
    esac
  ;;
  status)
    status_of_proc "$DAEMON" "$NAME" && exit 0 || exit $?
  ;;
  #reload|force-reload)
  #
  # If do_reload() is not implemented then leave this commented out
  # and leave 'force-reload' as an alias for 'restart'.
  #
  #log_daemon_msg "Reloading $DESC" "$NAME"
  #do_reload
  #log_end_msg $?
  #;;
  restart|force-reload)
  #
  # If the "reload" option is implemented then remove the
  # 'force-reload' alias
  #
    log_daemon_msg "Restarting $DESC" "$NAME"
    do_stop
    case "$?" in
      0|1)
      do_start
      case "$?" in
        0) log_end_msg 0 ;;
        1) log_end_msg 1 ;; # Old process is still running
        *) log_end_msg 1 ;; # Failed to start
      esac
      ;;
      *)
        # Failed to stop
        log_end_msg 1
      ;;
    esac
  ;;
  *)
  echo "Usage: $SCRIPTNAME {start|stop|status|restart|force-reload}" >&2
  exit 3
  ;;
esac

:
